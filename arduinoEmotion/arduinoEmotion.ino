#include "LedControl.h"


LedControl lc = LedControl(2,4,0,4); 
LedControl lcR = LedControl(12,16,14,4);
// (DIN, CLK, CS, 연결할 도트 매트릭스의 개수)


unsigned char normalA[][8] = {\
  {0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00},\ 
  {0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00},\
  {0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00},\
  {0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00},\
  {0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00},\        
};
unsigned char normalB[][8] = {\
  {0x7e,0xff,0xe7,0xc3,0xc3,0xe7,0xff,0x7e},\
  {0x00,0x3c,0xff,0xe7,0xe7,0xff,0x3c,0x00},\
  {0x00,0x3c,0xff,0xe7,0x81,0x00,0x00,0x00},\
  {0x00,0x3c,0xff,0xe7,0xe7,0xff,0x3c,0x00},\
  {0x7e,0xff,0xe7,0xc3,0xc3,0xe7,0xff,0x7e}\     
};
unsigned char normalC[][8] = {\
  {0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00},\
  {0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00},\
  {0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00},\
  {0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00},\
  {0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00}\   
};
unsigned char normalBR[][8] = {\
  {0x7e,0xff,0xe7,0xc3,0xc3,0xe7,0xff,0x7e},\
  {0x00,0x3c,0xff,0xe7,0xe7,0xff,0x3c,0x00},\
  {0x00,0x00,0x00,0x81,0xe7,0xff,0x3c,0x00},\
  {0x00,0x3c,0xff,0xe7,0xe7,0xff,0x3c,0x00},\
  {0x7e,0xff,0xe7,0xc3,0xc3,0xe7,0xff,0x7e}\     
};

unsigned char happyA[][8] = {\
  {0x00,0x00,0x00,0x80,0xc0,0xe0,0x60,0x00},\ 
  {0x00,0x00,0x80,0xc0,0xe0,0x60,0x00,0x00},\   
};
unsigned char happyB[][8] = {\
  {0x00,0x00,0x7e,0xff,0xc3,0x00,0x00,0x00},\ 
  {0x00,0x7e,0xff,0xc3,0x00,0x00,0x00,0x00},\ 
};
unsigned char happyC[][8] = {\
  {0x00,0x00,0x00,0x01,0x03,0x07,0x06,0x00},\ 
  {0x00,0x00,0x01,0x03,0x07,0x06,0x00,0x00},\   
};
unsigned char happyRA[][8] = {\
  {0x00,0x60,0xe0,0xc0,0x80,0x00,0x00,0x00},\
  {0x00,0x00,0x60,0xe0,0xc0,0x80,0x00,0x00},\ 
};
unsigned char happyRB[][8] = {\
  {0x00,0x00,0x00,0xc3,0xff,0x7e,0x00,0x00},\ 
  {0x00,0x00,0x00,0x00,0xc3,0xff,0x7e,0x00},\ 
};
unsigned char happyRC[][8] = {\
  {0x00,0x06,0x07,0x03,0x01,0x00,0x00,0x00},\
  {0x00,0x00,0x06,0x07,0x03,0x01,0x00,0x00},\ 
};

unsigned char sadA[][8] = {\
  {0x70,0xe0,0xc0,0x00,0x00,0x00,0x00,0x00},\ 
};
unsigned char sadB[][8] = {\
  {0x00,0xff,0xff,0x10,0x00,0x00,0x00,0x00},\ 
  {0x00,0xff,0xff,0x38,0x10,0x00,0x00,0x00},\ 
  {0x00,0xff,0xff,0x38,0x38,0x10,0x00,0x00},\ 
  {0x00,0xff,0xff,0x10,0x38,0x38,0x10,0x00},\ 
  {0x00,0xff,0xff,0x00,0x10,0x38,0x38,0x10},\ 
  {0x00,0xff,0xff,0x00,0x00,0x10,0x38,0x38},\ 
  {0x00,0xff,0xff,0x00,0x00,0x00,0x10,0x38},\
  {0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x10},\
};
unsigned char sadC[][8] = {\
  {0x00,0x07,0x0f,0x00,0x00,0x00,0x00,0x00},\
};
unsigned char sadRA[][8] = {\
  {0x00,0x00,0x00,0x00,0x00,0xc0,0xe0,0x70},\
};
unsigned char sadRB[][8] = {\
  {0x00,0x00,0x00,0x00,0x10,0xff,0xff,0x00},\ 
  {0x00,0x00,0x00,0x10,0x38,0xff,0xff,0x00},\ 
  {0x00,0x00,0x10,0x38,0x38,0xff,0xff,0x00},\ 
  {0x00,0x10,0x38,0x38,0x10,0xff,0xff,0x00},\ 
  {0x10,0x38,0x38,0x10,0x00,0xff,0xff,0x00},\
  {0x38,0x38,0x10,0x00,0x00,0xff,0xff,0x00},\
  {0x38,0x10,0x00,0x00,0x00,0xff,0xff,0x00},\
  {0x10,0x00,0x00,0x00,0x00,0xff,0xff,0x00},\
};
unsigned char sadRC[][8] = {\
  {0x00,0x00,0x00,0x00,0x00,0x0f,0x07,0x00},\
};

unsigned char angryA[][8] = {\
  {0x0f,0x0c,0x0c,0x06,0x03,0x01,0x00,0x00},\ 
  {0x07,0x06,0x06,0x03,0x01,0x00,0x00,0x00},\   
};
unsigned char angryB[][8] = {\
  {0xfc,0x1f,0x3f,0x3f,0x1f,0x8e,0xe0,0x7f},\ 
  {0xfe,0x0f,0x1f,0x1f,0x8f,0xc7,0x70,0x3f},\ 
};
unsigned char angryC[][8] = {\
  {0x00,0x00,0x80,0xe0,0x70,0x30,0x60,0xc0},\ 
  {0x00,0x80,0xc0,0xf0,0x38,0x18,0x30,0xe0},\   
};
unsigned char angryRA[][8] = {\
  {0xc0,0x60,0x30,0x70,0xe0,0x80,0x00,0x00},\
  {0x80,0xc0,0x60,0xe0,0xc0,0x00,0x00,0x00},\ 
};
unsigned char angryRB[][8] = {\
  {0x7f,0xe0,0x8e,0x1f,0x3f,0x3f,0x1f,0xfc},\ 
  {0xff,0xc0,0x1c,0x3e,0x7f,0x7f,0x3e,0xf8},\ 
};
unsigned char angryRC[][8] = {\
  {0x00,0x00,0x01,0x03,0x06,0x0c,0x0c,0x0f},\
  {0x00,0x01,0x03,0x06,0x0c,0x18,0x18,0x1f} ,\ 
};



int row, col, i, j;
 
void clean(){                       // 전체led를 꺼주는 함수
  for(int i = 0; i < 3; i++)
    lc.clearDisplay(i);// clear screen
}
void setup() {
  Serial.begin(115200);

  for(int i=0; i<3; i++){
    lc.shutdown(i,false);
    lc.setIntensity(i,0);
    lc.clearDisplay(i);
    lcR.shutdown(i,false);
    lcR.setIntensity(i,0);
    lcR.clearDisplay(i);
  }

}

String emoStatus = ""

void loop(){
  if (Serial.available()>0) {
    String emoStatus = Serial.readStringUntil('\n');
    if (emoStatus=="normal"){
      for (i = 0; i<5; i++)
      {
        for (j = 0; j<8; j++)
        {
          lc.setRow(0,j,normalA[i][j]);
          lc.setRow(1,j,normalB[i][j]);
          lc.setRow(2,j,normalC[i][j]);
          lcR.setRow(0,j,normalA[i][j]);
          lcR.setRow(1,j,normalBR[i][j]);
          lcR.setRow(2,j,normalC[i][j]);
        }
        delay(300);
      }
    }
    else if  (emoStatus=="happy"){
      for (i = 0; i<2; i++)
        {
          for (j = 0; j<8; j++)
          {
            lc.setRow(0,j,happyA[i][j]);
            lc.setRow(1,j,happyB[i][j]);
            lc.setRow(2,j,happyC[i][j]);
            lcR.setRow(0,j,happyRA[i][j]);
            lcR.setRow(1,j,happyRB[i][j]);
            lcR.setRow(2,j,happyRC[i][j]);
          }
          delay(300);
        }
    }
    else if  (emoStatus=="sad"){
      for (i = 0; i<8; i++)
        {
          for (j = 0; j<8; j++)
          {
            lc.setRow(0,j,sadA[0][j]);
            lc.setRow(1,j,sadB[i][j]);
            lc.setRow(2,j,sadC[0][j]);
            lcR.setRow(0,j,sadRA[0][j]);
            lcR.setRow(1,j,sadRB[i][j]);
            lcR.setRow(2,j,sadRC[0][j]);
          }
          delay(150);
        }
    }



    else if  (emoStatus=="angry"){
      for (i = 0; i<2; i++)
        {
          for (j = 0; j<8; j++)
          {
            lc.setRow(2,j,angryA[i][j]);
            lc.setRow(1,j,angryB[i][j]);
            lc.setRow(0,j,angryC[i][j]);
            lcR.setRow(0,j,angryRA[i][j]);
            lcR.setRow(1,j,angryRB[i][j]);
            lcR.setRow(2,j,angryRC[i][j]);
          }
          delay(100);
        }

    }
  }  
}